plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
//    id 'me.ele.lancet'
}

android {
    compileSdk rootProject.ext.compileSdkVersion
    namespace "app.allever.android.sample.project"

    defaultConfig {
        applicationId "app.allever.android.sample.project"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    configurations.all {
        resolutionStrategy {
            force 'androidx.appcompat:appcompat:1.1.0'
        }
    }

    signingConfigs {

//        debug {
//            keyAlias 'sampleproject'
//            keyPassword 'dixm5400'
//            storeFile file('../app.allever.android.sample.project.jks')
//            storePassword 'dixm5400'
//        }
//        release {
//            keyAlias 'sampleproject'
//            keyPassword 'dixm5400'
//            storeFile file('../app.allever.android.sample.project.jks')
//            storePassword 'dixm5400'
//        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding false
        viewBinding true
        buildConfig true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api project(path: ':common')
    api project(path: ':ui')
    api project(path: ':jetpack')
    api project(path: ':function')
    api project(path: ':kotlin')
    api project(path: ':thirtypart')
    api project(path: ':audiovideo')
    api project(path: ':jni')
    api project(path: ':jni-mk')
    api project(path: ':performance')
    api project(path: ':login')
    api project(path: ':learning-android')
    api project(path: ':billing')
    api project(path: ':cleaner')
    api project(path: ':designpattern')
    api project(path: ':videoeditor')
    api project(path: ':materialdesign')
    api project(path: ':toolbox')
    api project(path: ':gaodemap')
    api project(path: ':safe')
    api project(path: ':MicrosoftSpeech')


//    api project(path: ':aop')
}


/**
 * 生成字典Task
 */
task geneDictTask {
    doFirst{
        def dictPath = rootDir.getAbsolutePath()+'/app/dict.txt'
        def random = new Random()
        def lowercase = "abcdefghijklmnopqrstuvwxyz"
//        def lowercase = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_"
        def wordList = new HashSet()
        for (int i=0;i<10000;i++){
            def word = new StringBuilder()
            def wordLength = random.nextInt(5)+4
            for (int j=0;j<wordLength;j++){
                word.append(lowercase.charAt(random.nextInt(lowercase.length())))
            }
            wordList.add(word.toString())
        }
        def f = new File(dictPath)
        f.getParentFile().mkdirs()
        f.withWriter("UTF-8") {
            it.write(wordList.join(System.lineSeparator()))
        }
    }
}